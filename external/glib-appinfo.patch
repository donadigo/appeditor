# In the sandbox - the programs in the Exec and Try_Exec keys do not exist
# so GAppInfo will ignore them

diff --git a/gio/gdesktopappinfo.c b/gio/gdesktopappinfo.c
index 1f161328a..4184d40f0 100644
--- a/gio/gdesktopappinfo.c
+++ b/gio/gdesktopappinfo.c
@@ -1910,56 +1910,11 @@ g_desktop_app_info_load_from_keyfile (GDesktopAppInfo *info,
                                     G_KEY_FILE_DESKTOP_GROUP,
                                     G_KEY_FILE_DESKTOP_KEY_TRY_EXEC,
                                     NULL);
-  if (try_exec && try_exec[0] != '\0')
-    {
-      char *t;
-      /* Use the desktop file path (if any) as working dir to search program */
-      t = GLIB_PRIVATE_CALL (g_find_program_for_path) (try_exec, NULL, path);
-      if (t == NULL)
-        {
-          g_free (path);
-          g_free (try_exec);
-          return FALSE;
-        }
-      g_free (t);
-    }
 
   exec = g_key_file_get_string (key_file,
                                 G_KEY_FILE_DESKTOP_GROUP,
                                 G_KEY_FILE_DESKTOP_KEY_EXEC,
                                 NULL);
-  if (exec && exec[0] != '\0')
-    {
-      gint argc;
-      char **argv;
-      if (!g_shell_parse_argv (exec, &argc, &argv, NULL))
-        {
-          g_free (path);
-          g_free (exec);
-          g_free (try_exec);
-          return FALSE;
-        }
-      else
-        {
-          char *t;
-
-          /* Since @exec is not an empty string, there must be at least one
-           * argument, so dereferencing argv[0] should return non-NULL. */
-          g_assert (argc > 0);
-          /* Use the desktop file path (if any) as working dir to search program */
-          t = GLIB_PRIVATE_CALL (g_find_program_for_path) (argv[0], NULL, path);
-          g_strfreev (argv);
-
-          if (t == NULL)
-            {
-              g_free (path);
-              g_free (exec);
-              g_free (try_exec);
-              return FALSE;
-            }
-          g_free (t);
-        }
-    }
 
   info->name = g_key_file_get_locale_string (key_file, G_KEY_FILE_DESKTOP_GROUP, G_KEY_FILE_DESKTOP_KEY_NAME, NULL, NULL);
   info->generic_name = g_key_file_get_locale_string (key_file, G_KEY_FILE_DESKTOP_GROUP, GENERIC_NAME_KEY, NULL, NULL);
